import datetime
import ninja_syntax
import os
import sys

class Paths:
    polyMesh = [os.path.join("constant", "polyMesh", f) for f in ["points", "faces", "owner", "neighbour", "boundary"]]

class Case:
    def __init__(self, root):
        self.root = root
        self.blockMeshDict = self.path("system", "blockMeshDict")
        self.controlDict = self.path("system", "controlDict")
        self.mountainDict = self.path("system", "mountainDict")
        self.fvSchemes = self.path("system", "fvSchemes")
        self.fvSolution = self.path("system", "fvSolution")

        self.polyMesh = [self.path(f) for f in Paths.polyMesh]
        self.systemFiles = [self.fvSchemes, self.fvSolution, self.controlDict]

    def path(self, path, *paths):
        return os.path.join(self.root, path, *paths)

    def __str__(self):
        return self.root

class Generator:
    def __init__(self):
        self.n = ninja_syntax.Writer(sys.stdout)

    def header(self):
        self.n.comment("Generated by \"{}\"".format(" ".join(sys.argv)))
        self.n.comment("at {}".format(datetime.datetime.utcnow().isoformat()))
        self.n.newline()

    def copy(self, source, target):
        self.n.build(outputs=str(target), rule="cp", inputs=str(source))

    def copyAll(self, files, source, target):
        for f in files:
            self.copy(os.path.join(str(source), f), os.path.join(str(target), f))

