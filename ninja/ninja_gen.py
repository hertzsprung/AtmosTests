import datetime
import ninja_syntax
import os
import sys

class Generator:
    def __init__(self, case):
        self.case = case
        self.n = ninja_syntax.Writer(sys.stdout)
        self.polyMesh = [os.path.join("constant", "polyMesh", f) for f in ["points", "faces", "owner", "neighbour", "boundary"]]
        self.systemFiles = [os.path.join("system", f) for f in ["fvSchemes", "fvSolution", "controlDict"]]

    def header(self):
        self.n.comment("Generated by \"{}\"".format(" ".join(sys.argv)))
        self.n.comment("at {}".format(datetime.datetime.utcnow().isoformat()))
        self.n.newline()

    def copy(self, source, target):
        self.n.build(outputs=target, rule="cp", inputs=source)

    def copyAll(self, files, source, target):
        for f in files:
            self.copy(os.path.join(source, f), os.path.join(target, f))

    def forCase(self, path, *paths, case=None):
        case = case or self.case
        return os.path.join(case, path, *paths)

    def polyMeshForCase(self, case=None):
        return self.filesForCase(self.polyMesh, case)

    def systemFilesForCase(self, case=None):
        return self.filesForCase(self.systemFiles, case)

    def filesForCase(self, files, case=None):
        case = case or self.case
        return [os.path.join(case, f) for f in files]

