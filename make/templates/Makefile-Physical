# $1 -- case
# $2 -- mesh
# $3 -- theta_init dictionary
# $4 -- environmentalProperties
# $5 -- thermophysicalProperties
# $6 -- fvSchemes
# $7 -- fvSolution
define InitialTheta

.INTERMEDIATE: $1.intermediate

$1/0/theta $1/0/thetaf: $1.intermediate

$1.intermediate: \
  $1/$(thetaInit) \
  $(addprefix $1/,$(meshFiles)) \
  $(addprefix $1/,$(systemFiles)) \
  $1/$(environmentalProperties) \
  $1/$(thermophysicalProperties) \
  $(setTheta) \
| $1/constant $1/system
	$(setTheta) -case $1

$(eval $(call CopyFile,$3,$1/$(thetaInit)))
$(eval $(call CopyNamedFiles,$2,$(meshFiles),$1))
$(eval $(call CopyFile,$6,$1/$(fvSchemes)))
$(eval $(call CopyFile,$7,$1/$(fvSolution)))
$(eval $(call CopyNamedFile,$(dummy),$(controlDict),$1))
$(eval $(call CopyFile,$4,$1/$(environmentalProperties)))
$(eval $(call CopyFile,$5,$1/$(thermophysicalProperties)))

$(eval $(call MakeDir,$1/constant))
$(eval $(call MakeDir,$1/system))
$(eval $(call MakeDir,$1/$(polyMesh)))

endef

define InitialExnerInterpTheta

$(eval $(call InitialExner,$1,$2,$3,$4,$5,$6,$7,$8,))

endef

define InitialExnerNoInterpTheta

$(eval $(call InitialExner,$1,$2,$3,$4,$5,$6,$7,$8,-noInterpolate))

endef

# $1 -- case
# $2 -- mesh
# $3 -- exner_init dictionary
# $4 -- initial theta
# $5 -- environmentalProperties
# $6 -- thermophysicalProperties
# $7 -- fvSchemes
# $8 -- fvSolution
# $9 -- noInterpolation flag
define InitialExner

$1/0/Exner: \
  $1/0/theta \
  $1/0/thetaf \
  $1/$(exnerInit) \
  $(addprefix $1/,$(meshFiles)) \
  $(addprefix $1/,$(systemFiles)) \
  $1/$(environmentalProperties) \
  $1/$(thermophysicalProperties) \
  $(setExnerBalancedH) \
| $1/constant $1/system
	$(setExnerBalancedH) -case $1 $9
	sed -i 's/fixedValue;/fixedFluxBuoyantExner; gradient uniform 0;/g' $$@

$(eval $(call CopyFile,$4,$1/0/theta))
$(eval $(call CopyFile,$4f,$1/0/thetaf))
$(eval $(call CopyFile,$3,$1/$(exnerInit)))
$(eval $(call CopyNamedFiles,$2,$(meshFiles),$1))
$(eval $(call CopyFile,$7,$1/$(fvSchemes)))
$(eval $(call CopyFile,$8,$1/$(fvSolution)))
$(eval $(call CopyNamedFile,$(dummy),$(controlDict),$1))
$(eval $(call CopyFile,$5,$1/$(environmentalProperties)))
$(eval $(call CopyFile,$6,$1/$(thermophysicalProperties)))

$(eval $(call MakeDir,$1/0))
$(eval $(call MakeDir,$1/constant))
$(eval $(call MakeDir,$1/system))
$(eval $(call MakeDir,$1/$(polyMesh)))

endef

# $1 -- case
# $2 -- mesh
# $3 -- initial Uf
# $4 -- initial theta
# $5 -- initial exner
# $6 -- environmentalProperties
# $7 -- thermophysicalProperties
# $8 -- fvSchemes
# $9 -- fvSolution
# $10 -- duration (must be a multiple of timestep and writeInterval)
# $11 -- timestep
# $12 -- writeInterval (must be a multiple of timestep)
# $13 -- solver application
define Physical

all:: $1.fields.intermediate

.INTERMEDIATE: $1.fields.intermediate

$(addprefix $1/$(10)/,Exner theta thetaf Uf) $1/energy.dat $1/courant.dat: $1.fields.intermediate

$1.fields.intermediate: \
  $1/0/Uf \
  $1/0/theta \
  $1/0/thetaf \
  $1/0/Exner \
  $(addprefix $1/,$(meshFiles)) \
  $(addprefix $1/,$(systemFiles)) \
  $1/$(environmentalProperties) \
  $1/$(thermophysicalProperties) \
  $1/$(decomposeParDict) \
  $(13) \
| $1/constant $1/system
	$(decomposePar) -case $1 -force -constant
	bin/correctMPIinitialUf.sh $1
	$(mpirun) --hostfile machines -np 4 $(13) -case $1 -parallel
	$(reconstructPar) -case $1 -constant
	cp $(addprefix $1/processor0/,energy.dat courant.dat) $1/

$(eval $(call CopyFile,$3,$1/0/Uf))
$(eval $(call CopyFile,$4,$1/0/theta))
$(eval $(call CopyFile,$4f,$1/0/thetaf))
$(eval $(call CopyFile,$5,$1/0/Exner))
$(eval $(call CopyFile,$6,$1/$(environmentalProperties)))
$(eval $(call CopyFile,$7,$1/$(thermophysicalProperties)))
$(eval $(call CopyFile,$8,$1/$(fvSchemes)))
$(eval $(call CopyFile,$9,$1/$(fvSolution)))
$(eval $(call CopyNamedFile,src/physical,$(decomposeParDict),$1))
$(eval $(call CopyNamedFiles,$2,$(meshFiles),$1))
$(eval $(call ControlDict,$1,$(10),$(11),$(12)))

$(eval $(call MakeDir,$1/0))
$(eval $(call MakeDir,$1/constant))
$(eval $(call MakeDir,$1/system))
$(eval $(call MakeDir,$1/$(polyMesh)))

endef
