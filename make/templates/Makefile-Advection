# $1 -- case directory
# $2 -- mesh case
define LinearHorizontalAdvection

$(eval $(call Advection,$1,$2,src/advection/radialTracer,src/advection/horizontalVelocityField,src/advection/system/linear,25))

endef

# $1 -- case directory
# $2 -- mesh case
define CubicUpwindHorizontalAdvection

$(eval $(call Advection,$1,$2,src/advection/radialTracer,src/advection/horizontalVelocityField,src/advection/system/cubicUpwindCPCFit,25))

endef

# $1 -- case directory
# $2 -- mesh case
define LinearTerrainFollowingAdvection

$(eval $(call Advection,$1,$2,src/advection/radialTracer,src/advection/terrainFollowingVelocityField,src/advection/system/linear,20))

endef

# $1 -- case directory
# $2 -- mesh case
define CubicUpwindTerrainFollowingAdvection

$(eval $(call Advection,$1,$2,src/advection/radialTracer,src/advection/terrainFollowingVelocityField,src/advection/system/cubicUpwindCPCFit,20))

endef

# $1 -- case directory
# $2 -- mesh case
# $3 -- tracerFieldDict
# $4 -- velocityFieldDict
# $5 -- fvSchemes
# $6 -- timestep
define Advection

all:: $1/10000/l2errorT.txt $1/10000/minT.txt $1/10000/maxT.txt

$(eval $(call InitialTracer,$1,$3))
$(eval $(call VelocityField,$1-velocity,$2,$4))
$(eval $(call AnalyticTracer,$1-analyticTracer,$2,5000 10000,$3,$4))

$(eval $(call AdvectTracerInFixedWind,$1,$2,$1-velocity/0/phi,5000 10000,$6,1000,$5 src/advection/system/commonFvSchemes))

$(eval $(call FieldDiff,$1,10000,T,$1-analyticTracer/10000/T_analytic))
$(eval $(call Extrema,$1,10000,T))
$(eval $(call L2Error,$1,10000,T))
$(eval $(call Contour,$1,0,T,$1/0/T.samplePlane,0.1))
$(eval $(call Contour,$1,5000,T,$1/5000/T.samplePlane,0.1))
$(eval $(call Contour,$1,10000,T,$1/10000/T.samplePlane,0.1))
$(eval $(call Contour,$1,10000,T_diff,$1/10000/T_diff.samplePlane,0.01))
$(eval $(call SamplePlanes,$1,0 5000 10000,T,src/advection/samplePlane))
$(eval $(call SamplePlanes,$1,10000,T_diff,src/advection/samplePlane))

endef

# $1 -- case directory
# $2 -- mesh case
# $3 -- velocity field
# $4 -- times (e.g. 5000 10000)
# $5 -- timestep
# $6 -- writeInterval (must be a multiple of timestep)
# $7 -- fvSchemes file list (the first file must be the fvSchemes file itself, the remainder are copied into $1/system)
define AdvectTracerInFixedWind

$1.intermediate: \
  $1/0/phi

$(eval $(call AdvectTracer,$1,$2,$4,$5,$6,$7))

$(eval $(call CopyFile,$3,$1/0/phi))

endef

# $1 -- case directory
# $2 -- mesh case
# $3 -- advectionDict
# $4 -- times (e.g. 5000 10000)
# $5 -- timestep
# $6 -- writeInterval (must be a multiple of timestep)
# $7 -- fvSchemes file list (the first file must be the fvSchemes file itself, the remainder are copied into $1/system)
# $8 -- advectionDict
define AdvectTracerInVaryingWind

$1.intermediate: \
  $1/$(advectionDict)

$(eval $(call AdvectTracer,$1,$2,$4,$5,$6,$7))

$(eval $(call CopyFile,$3,$1/$(advectionDict)))

endef

# $1 -- case directory
# $2 -- mesh case
# $3 -- times (e.g. 5000 10000)
# $4 -- timestep
# $5 -- writeInterval (must be a multiple of timestep)
# $6 -- fvSchemes file list (the first file must be the fvSchemes file itself, the remainder are copied into $1/system)
define AdvectTracer

.INTERMEDIATE: $1.intermediate

$(addprefix $1/,$(addsuffix /T,$3)): $1.intermediate

$1.intermediate: \
  $(addprefix $1/,$(meshFiles)) \
  $(addprefix $1/,$(systemFiles)) \
  $1/0/T
	$(advectionFoam) -case $1

# primary fvSchemes file depends upon any auxiliary fvSchemes files
$1/$(fvSchemes): $(addprefix $1/system/,$(notdir $(call rest,$6)))

$(eval $(call CopyNamedFiles,$2,$(meshFiles),$1))
$(eval $(call ControlDict,$1,$(lastword $3),$4,$5))
$(eval $(call CopyNamedFile,src/advection,$(fvSolution),$1))
$(eval $(call CopyFile,$(firstword $6),$1/$(fvSchemes)))
$(foreach F,$(call rest,$6),$(eval $(call CopyNamedFile,$(dir $F),$(notdir $F),$1/system)))

$(eval $(call MakeDir,$1/$(polyMesh)))
$(eval $(call MakeDir,$1/system))
$(eval $(call MakeDir,$1/0))
$(eval $(call MakeDir,$1))

endef

# $1 -- case
# $2 -- tracerFieldDict
define InitialTracer

$1/0/T: \
  $(addprefix $1/,$(meshFiles)) \
  $(addprefix $1/,$(systemFiles)) \
  $1/$(tracerFieldDict) \
  $(setInitialTracerField)
	$(setInitialTracerField) -case $1

$(eval $(call CopyFile,$2,$1/$(tracerFieldDict)))

endef

# $1 -- case
# $2 -- mesh
# $3 -- times
# $4 -- tracerFieldDict
# $5 -- velocityFieldDict
define AnalyticTracer

.INTERMEDIATE: $1.analytic.intermediate

$(addprefix $1/,$(addsuffix /T_analytic,$3)): $1.analytic.intermediate

$1.analytic.intermediate: \
  $(addprefix $1/,$(meshFiles)) \
  $(addprefix $1/,$(systemFiles)) \
  $1/$(tracerFieldDict) \
  $1/$(velocityFieldDict) \
  $(setAnalyticTracerField)
	$(setAnalyticTracerField) -case $1

$(eval $(call CopyFile,$4,$1/$(tracerFieldDict)))
$(eval $(call CopyFile,$5,$1/$(velocityFieldDict)))
$(eval $(call CopyNamedFiles,$2,$(meshFiles),$1))
$(eval $(call ControlDict,$1,$(lastword $3),$(firstword $3),$(firstword $3)))
$(eval $(call CopyNamedFiles,$(dummy),$(fvSchemes) $(fvSolution),$1))

$(eval $(call MakeDir,$1/constant))
$(eval $(call MakeDir,$1/system))
$(eval $(call MakeDir,$1/$(polyMesh)))

endef

# $1 -- case directory
# $2 -- mesh case
# $3 -- velocityFieldDict
define VelocityField

$1/0/phi: \
  $1/$(velocityFieldDict) \
  $(addprefix $1/,$(meshFiles)) \
  $(addprefix $1/,$(systemFiles)) \
  $(setVelocityField)
	$(setVelocityField) -case $1
	touch $$@

$(eval $(call CopyFile,$3,$1/$(velocityFieldDict)))
$(eval $(call CopyNamedFiles,$2,$(meshFiles),$1))
$(eval $(call CopyNamedFiles,$(dummy),$(systemFiles),$1))

$(eval $(call MakeDir,$1/constant))
$(eval $(call MakeDir,$1/system))
$(eval $(call MakeDir,$1/$(polyMesh)))

endef
